// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package xsk

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXsk_def_xdp_prog returns the embedded CollectionSpec for xsk_def_xdp_prog.
func loadXsk_def_xdp_prog() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xsk_def_xdp_progBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xsk_def_xdp_prog: %w", err)
	}

	return spec, err
}

// loadXsk_def_xdp_progObjects loads xsk_def_xdp_prog and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xsk_def_xdp_progObjects
//	*xsk_def_xdp_progPrograms
//	*xsk_def_xdp_progMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXsk_def_xdp_progObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXsk_def_xdp_prog()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xsk_def_xdp_progSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xsk_def_xdp_progSpecs struct {
	xsk_def_xdp_progProgramSpecs
	xsk_def_xdp_progMapSpecs
}

// xsk_def_xdp_progSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xsk_def_xdp_progProgramSpecs struct {
	XskDefProg *ebpf.ProgramSpec `ebpf:"xsk_def_prog"`
}

// xsk_def_xdp_progMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xsk_def_xdp_progMapSpecs struct {
	XsksMap *ebpf.MapSpec `ebpf:"xsks_map"`
}

// xsk_def_xdp_progObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXsk_def_xdp_progObjects or ebpf.CollectionSpec.LoadAndAssign.
type xsk_def_xdp_progObjects struct {
	xsk_def_xdp_progPrograms
	xsk_def_xdp_progMaps
}

func (o *xsk_def_xdp_progObjects) Close() error {
	return _Xsk_def_xdp_progClose(
		&o.xsk_def_xdp_progPrograms,
		&o.xsk_def_xdp_progMaps,
	)
}

// xsk_def_xdp_progMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXsk_def_xdp_progObjects or ebpf.CollectionSpec.LoadAndAssign.
type xsk_def_xdp_progMaps struct {
	XsksMap *ebpf.Map `ebpf:"xsks_map"`
}

func (m *xsk_def_xdp_progMaps) Close() error {
	return _Xsk_def_xdp_progClose(
		m.XsksMap,
	)
}

// xsk_def_xdp_progPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXsk_def_xdp_progObjects or ebpf.CollectionSpec.LoadAndAssign.
type xsk_def_xdp_progPrograms struct {
	XskDefProg *ebpf.Program `ebpf:"xsk_def_prog"`
}

func (p *xsk_def_xdp_progPrograms) Close() error {
	return _Xsk_def_xdp_progClose(
		p.XskDefProg,
	)
}

func _Xsk_def_xdp_progClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xsk_def_xdp_prog_bpfel.o
var _Xsk_def_xdp_progBytes []byte
